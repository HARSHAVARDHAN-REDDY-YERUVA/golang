# 1. create a type SQUARE
# 2. create a type CIRCLE
# 3. attach a method to each that calculates AREA and returns it
#     circle area= Ï€ r 2
#     square area = L * W
# 4. create a type SHAPE that defines an interface as anything that has the AREA method
# 5. create a func INFO which takes type shape and then prints the area
# 6. create a value of type square
# 7. create a value of type circle
# 8. use func info to print the area of square
# 9. use func info to print the area of circle

package main

import (
	"fmt"
	"math"
)

type square struct {
	length float64
	width  float64
}

type circle struct {
	rad float64
}

func (s square) area() float64 {
	return s.length * s.width
}

func (c circle) area() float64 {
	return math.Pi * c.rad * c.rad
}

type shape interface {
	area() float64
}

func info(sh shape) {
	fmt.Println(sh.area())
}

func main() {
	sq := square{
		length: 12,
		width:  12,
	}

	ci := circle{
		rad: 2.5,
	}
	info(sq)
	info(ci)
}

Output:

144
19.634954084936208
