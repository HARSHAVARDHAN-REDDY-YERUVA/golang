# in addition to the main goroutine, launch two additional goroutines
# each additional goroutine should print something out
# use waitgroups to make sure each goroutine finishes before your program exists

package main

import (
        "fmt"
        "sync"
        "runtime"
)

var wg sync.WaitGroup

func main() {
        fmt.Println("CPUs:", runtime.NumCPU())
        fmt.Println("Go routines:", runtime.NumGoroutine())
go foo()
        go bar()
        fmt.Println("Go routines", runtime.NumGoroutine())
        wg.Add(2)
        fmt.Println("Main go routine")
        wg.Wait()
        fmt.Println("Go routines", runtime.NumGoroutine())
}

func foo() {
        for i := 0; i < 20; i++ {
                fmt.Println("foo:", i)
        }
        wg.Done()
}

func bar() {
        for i := 0; i < 20; i++ {
                fmt.Println("bar:", i)
        }
        wg.Done()
}

Output:

CPUs: 4
Go routines: 1
Go routines 3
Main go routine
foo: 0
bar: 0
foo: 1
bar: 1
foo: 2
bar: 2
foo: 3
bar: 3
foo: 4
bar: 4
foo: 5
bar: 5
foo: 6
bar: 6
foo: 7
bar: 7
foo: 8
bar: 8
foo: 9
bar: 9
foo: 10
bar: 10
foo: 11
bar: 11
foo: 12
bar: 12
foo: 13
bar: 13
foo: 14
bar: 14
foo: 15
bar: 15
foo: 16
bar: 16
foo: 17
bar: 17
foo: 18
bar: 18
foo: 19
bar: 19
Go routines 1
